@page "/jobs"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject ApiClient JobApi

<PageTitle>Batch Jobs</PageTitle>

<h1>OpenAI Batch Jobs</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

@if (jobs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Endpoint</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in jobs)
            {
                <tr>
                    <td>@job.Id</td>
                    <td>@job.Endpoint</td>
                    <td>@job.Status</td>
                </tr>
            }
        </tbody>
        
    </table>
}

@code {
    private OpenAIBatchInfo[]? jobs;

    protected override async Task OnInitializedAsync()
    {
        jobs = await JobApi.GetBatchJobsAsync();
    }
}
